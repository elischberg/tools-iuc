<tool id="varvamp" name="varVAMP" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>design primers for highly diverse viruses</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">varvamp</requirement>
    </requirements>
    <version_command>varvamp --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
VARVAMP_CONFIG="custom_config" varvamp

$mode.m_select
#if $mode.threshold != None:
  --threshold $mode.threshold
#end if 
#if $mode.n_ambig != None:
  --n-ambig $mode.n_ambig 
#end if

#if $mode.db_sec.db_cond.db_check == "expand":
  --database $mode.db_sec.db_cond.database
#end if

#if str( $mode.m_select ) == "single":
  --opt-length $mode.opt_length
  --max-length $mode.max_length
  #if $mode.report_n != None:
    --report-n $mode.report_n
  #end if
#elif str( $mode.m_select ) == "tiled":
  --opt-length $mode.opt_length
  --max-length $mode.max_length
  --overlap $mode.overlap
#elif str( $mode.m_select ) == "qpcr":
  #if $mode.pn_ambig != None
    --pn-ambig $mode.pn_ambig
  #end if
  --test-n $mode.test_n
  --deltaG $mode.deltaG
#end if

--threads \${GALAXY_SLOTS:-1}

'$alignment'
results/
    ]]></command>
    <configfiles>
        <configfile filename="custom_config"><![CDATA[#if str( $mode.m_select ) == "single" or str( $mode.m_select ) == "tiled":
    #if $mode.advanced_cond.custom_select == "expand":
PRIMER_TMP = ($mode.advanced_cond.basic_primer_params.PRIMER_TMP_min, $mode.advanced_cond.basic_primer_params.PRIMER_TMP_max, $mode.advanced_cond.basic_primer_params.PRIMER_TMP_opt)
PRIMER_GC_RANGE = ($mode.advanced_cond.basic_primer_params.PRIMER_GC_RANGE_min, $mode.advanced_cond.basic_primer_params.PRIMER_GC_RANGE_max, $mode.advanced_cond.basic_primer_params.PRIMER_GC_RANGE_opt)
PRIMER_SIZES = ($mode.advanced_cond.basic_primer_params.PRIMER_SIZES_min, $mode.advanced_cond.basic_primer_params.PRIMER_SIZES_max, $mode.advanced_cond.basic_primer_params.PRIMER_SIZES_opt)
PRIMER_MAX_POLYX = $mode.advanced_cond.basic_primer_params.PRIMER_MAX_POLYX
PRIMER_MAX_DINUC_REPEATS = $mode.advanced_cond.basic_primer_params.PRIMER_MAX_DINUC_REPEATS
PRIMER_HAIRPIN = $mode.advanced_cond.basic_primer_params.PRIMER_HAIRPIN
PRIMER_GC_END = ($mode.advanced_cond.basic_primer_params.PRIMER_GC_END_min, $mode.advanced_cond.basic_primer_params.PRIMER_GC_END_max)
PRIMER_MIN_3_WITHOUT_AMB = $mode.advanced_cond.basic_primer_params.PRIMER_MIN_3_WITHOUT_AMB
PRIMER_MAX_DIMER_TMP = $mode.advanced_cond.basic_primer_params.PRIMER_MAX_DIMER_TMP
PCR_MV_CONC = $mode.advanced_cond.pcr_params.PCR_MV_CONC
PCR_DV_CONC = $mode.advanced_cond.pcr_params.PCR_DV_CONC
PCR_DNTP_CONC = $mode.advanced_cond.pcr_params.PCR_DNTP_CONC
PCR_DNA_CONC = $mode.advanced_cond.pcr_params.PCR_DNA_CONC
PRIMER_TM_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_TM_PENALTY
PRIMER_GC_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_GC_PENALTY
PRIMER_SIZE_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_SIZE_PENALTY
PRIMER_MAX_BASE_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_MAX_BASE_PENALTY
##PRIMER_3_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_3_PENALTY
PRIMER_PERMUTATION_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_PERMUTATION_PENALTY
    #end if
  #elif str( $mode.m_select ) == "qpcr":
    #if $mode.advanced_cond.custom_select == "expand":
PRIMER_TMP = ($mode.advanced_cond.basic_primer_params.PRIMER_TMP_min, $mode.advanced_cond.basic_primer_params.PRIMER_TMP_max, $mode.advanced_cond.basic_primer_params.PRIMER_TMP_opt)
PRIMER_GC_RANGE = ($mode.advanced_cond.basic_primer_params.PRIMER_GC_RANGE_min, $mode.advanced_cond.basic_primer_params.PRIMER_GC_RANGE_max, $mode.advanced_cond.basic_primer_params.PRIMER_GC_RANGE_opt)
PRIMER_SIZES = ($mode.advanced_cond.basic_primer_params.PRIMER_SIZES_min, $mode.advanced_cond.basic_primer_params.PRIMER_SIZES_max, $mode.advanced_cond.basic_primer_params.PRIMER_SIZES_opt)
PRIMER_MAX_POLYX = $mode.advanced_cond.basic_primer_params.PRIMER_MAX_POLYX
PRIMER_MAX_DINUC_REPEATS = $mode.advanced_cond.basic_primer_params.PRIMER_MAX_DINUC_REPEATS
PRIMER_HAIRPIN = $mode.advanced_cond.basic_primer_params.PRIMER_HAIRPIN
PRIMER_GC_END = ($mode.advanced_cond.basic_primer_params.PRIMER_GC_END_min, $mode.advanced_cond.basic_primer_params.PRIMER_GC_END_max)
PRIMER_MIN_3_WITHOUT_AMB = $mode.advanced_cond.basic_primer_params.PRIMER_MIN_3_WITHOUT_AMB
PRIMER_MAX_DIMER_TMP = $mode.advanced_cond.basic_primer_params.PRIMER_MAX_DIMER_TMP
QPROBE_TMP = ($mode.advanced_cond.advanced_qpcr_parameters.QPROBE_TMP_min, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_TMP_max, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_TMP_opt)
QPROBE_SIZES = ($mode.advanced_cond.advanced_qpcr_parameters.QPROBE_SIZES_min, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_SIZES_max, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_SIZES_opt)
QPROBE_GC_RANGE = ($mode.advanced_cond.advanced_qpcr_parameters.QPROBE_GC_RANGE_min, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_GC_RANGE_max, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_GC_RANGE_opt)
QPROBE_GC_END = ($mode.advanced_cond.advanced_qpcr_parameters.QPROBE_GC_END_min, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_GC_END_max)
QPRIMER_DIFF = $mode.advanced_cond.advanced_qpcr_parameters.QPRIMER_DIFF
QPROBE_TEMP_DIFF = ($mode.advanced_cond.advanced_qpcr_parameters.QPROBE_TEMP_DIFF_min, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_TEMP_DIFF_max)
QPROBE_DISTANCE = ($mode.advanced_cond.advanced_qpcr_parameters.QPROBE_DISTANCE_min, $mode.advanced_cond.advanced_qpcr_parameters.QPROBE_DISTANCE_max)
END_OVERLAP = $mode.advanced_cond.advanced_qpcr_parameters.END_OVERLAP
QAMPLICON_LENGTH = ($mode.advanced_cond.advanced_qpcr_parameters.QAMPLICON_LENGTH_min, $mode.advanced_cond.advanced_qpcr_parameters.QAMPLICON_LENGTH_max)
QAMPLICON_GC = ($mode.advanced_cond.advanced_qpcr_parameters.QAMPLICON_GC_min, $mode.advanced_cond.advanced_qpcr_parameters.QAMPLICON_GC_max)
QAMPLICON_DEL_CUTOFF =  $mode.advanced_cond.advanced_qpcr_parameters.QAMPLICON_DEL_CUTOFF
PCR_MV_CONC = $mode.advanced_cond.pcr_params.PCR_MV_CONC
PCR_DV_CONC = $mode.advanced_cond.pcr_params.PCR_DV_CONC
PCR_DNTP_CONC = $mode.advanced_cond.pcr_params.PCR_DNTP_CONC
PCR_DNA_CONC = $mode.advanced_cond.pcr_params.PCR_DNA_CONC
PRIMER_TM_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_TM_PENALTY
PRIMER_GC_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_GC_PENALTY
PRIMER_SIZE_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_SIZE_PENALTY
PRIMER_MAX_BASE_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_MAX_BASE_PENALTY
##PRIMER_3_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_3_PENALTY
PRIMER_PERMUTATION_PENALTY = $mode.advanced_cond.multiple_penalties.PRIMER_PERMUTATION_PENALTY
    #end if
  #end if
  #if $mode.db_sec.db_cond.db_check == "expand":
    #if $mode.db_sec.db_cond.blast_advanced_cond.blast_advanced == "yes"
BLAST_SETTINGS = {
    "outfmt": "6 qseqid sseqid qlen length mismatch gapopen sstart send",
    "evalue": $mode.db_sec.db_cond.blast_advanced_cond.blast_search.evalue,
    "reward": $mode.db_sec.db_cond.blast_advanced_cond.blast_search.reward,
    "penalty": $mode.db_sec.db_cond.blast_advanced_cond.blast_search.penalty,
    "gapopen": $mode.db_sec.db_cond.blast_advanced_cond.blast_search.gapopen,
    "gapextend": $mode.db_sec.db_cond.blast_advanced_cond.blast_search.gapextend
}
BLAST_MAX_DIFF = $mode.db_sec.db_cond.blast_advanced_cond.BLAST_MAX_DIFF
BLAST_SIZE_MULTI = $mode.db_sec.db_cond.blast_advanced_cond.BLAST_SIZE_MULTI
BLAST_PENALTY = $mode.db_sec.db_cond.blast_advanced_cond.BLAST_PENALTY
    #end if
  #end if
        ]]></configfile>
    </configfiles>
    <inputs>
        <param name="alignment" type="data" format="fasta" label="Multiple alignment" />
        <conditional name="mode">
            <param name="m_select" type="select" label="Choose a specific design mode for your primers.">
                <option value="single">Primers for single sequencing</option>
                <option value="tiled">Primers for whole genome sequencing</option>
                <option value="qpcr">Primers for qPCR</option>
            </param>
            <when value="single">
                <expand macro="general_parameters" />
                <param argument="--opt-length" type="integer" min="0" max="10000" value="1000" optional="true" label="optimal length of the amplicons" help="Default setting: 1000" />
                <param argument="--max-length" type="integer" min="0" max="10000" value="1500" optional="true" label="max length of the amplicons" help="Default setting: 1500" />
                <param argument="--report-n" type="integer" min="1" optional="true" label="report the top n best hits" help="If not specified, Default setting: infinite" />
                <conditional name="advanced_cond">
                    <param name="custom_select" type="select" label="Advanced Settings" help="To fully customize VarVAMP!">
                        <option value="">No further customization</option>
                        <option value="expand">Customization of VarVAMP-configs</option>
                    </param>
                    <when value="" />
                    <when value="expand">
                        <expand macro="advanced_general_parameters" />
                    </when>
                </conditional>
                <section name="s_out_s" title="Specified Output" expanded="true">
                    <param name="s_out" type="select" display="checkboxes" multiple="true" optional="true" label="Which mode specific outputs you would lie to obtain?">
                        <option value="primers">Primer sequences in fasta format.</option>
                        <option value="primer_to_amplicon_assignments">Simple tab separated file, which primers belong together. Useful for bioinformatic workflows that include primer trimming.</option>
                        <option value="primer">A tab separated file with important parameters for the primers including the sequence with ambiguous nucleotides (already in the right strand) and the gc and temperature of the best fitting primer as well as for the mean for all permutations of the primer.</option>
                        <option value="all_primers">A bed file with all high scoring primers that varVAMP found.</option>
                    </param>
                </section>
            </when>
            <when value="tiled">
                <expand macro="general_parameters" />
                <param argument="--opt-length" type="integer" min="200" max="10000" value="1000" optional="true" label="Optimal length of the amplicons" help="Default setting: 1000" />
                <param argument="--max-length" type="integer" min="200" max="10000" value="1500" optional="true" label="Maximum length of the amplicons" help="Default setting: 1500" />
                <param argument="--overlap" type="integer" min="1" max="1000" value="100" optional="true" label="Minimum overlap of the amplicons" help="If not specified, Default setting: 100" />
                <conditional name="advanced_cond">
                    <param name="custom_select" type="select" label="Advanced Settings" help="To fully customize VarVAMP!">
                        <option value="">No further customization</option>
                        <option value="expand">Customization of VarVAMP-configs</option>
                    </param>
                    <when value="" />
                    <when value="expand">
                        <expand macro="advanced_general_parameters" />
                    </when>
                </conditional>
                <section name="s_out_s" title="Specified Output" expanded="true">
                    <param name="s_out" type="select" display="checkboxes" multiple="true" optional="true" label="Which mode specific outputs you would like to obtain?">
                        <option value="unsolvable_primers_dimers">Only produced if there are primer dimers without replacements. Tells which primers form dimers and at which temperature.</option>
                        <option value="primers_pool_0_1">Primer sequences per pool in fasta format.</option>
                        <option value="primer_to_amplicon_assignments">Simple tab separated file, which primers belong together. Useful for bioinformatic workflows that include primer trimming.</option>
                        <option value="primer">A tab separated file with important parameters for the primers including the sequence with ambiguous nucleotides (already in the right strand) and the gc and temperature of the best fitting primer as well as for the mean for all permutations of the primer.</option>
                        <option value="all_primers">A bed file with all high scoring primers that varVAMP found.</option>
                    </param>
                </section>
            </when>
            <when value="qpcr">
                <expand macro="general_parameters" />
                <param argument="--pn-ambig" type="integer" min="0" max="100" optional="true" label="Max number of ambiguous characters in a probe" />
                <param argument="--test-n" type="integer" min="10" max="1000" value="50" optional="true" label="Top n qPCR amplicons to test" help="test the top n qPCR amplicons for secondary structures at the minimal primer temperature. Default setting: 50" />
                <param argument="--deltaG" type="integer" min="-100" max="100" value="-3" optional="true" label="Minimum free energy (kcal/mol/K) cutoff" help="Minimum free energy (kcal/mol/K) cutoff at the lowest primer melting temperature. Default setting: -3." />
                <conditional name="advanced_cond">
                    <param name="custom_select" type="select" label="Advanced Settings" help="To fully customize VarVAMP!">
                        <option value="">No further customization</option>
                        <option value="expand">Customization of VarVAMP-configs</option>
                    </param>
                    <when value="" />
                    <when value="expand">
                        <expand macro="advanced_general_parameters" />
                        <section name="advanced_qpcr_parameters" title="Advanced qPCR Settings" expanded="false">
                            <!--basic probe parameters-->
                            <param name="QPROBE_TMP_min" type="integer" min="0" max="100" value="64" label="Minimum qPCR Probe Temperature." help="Mean 7°C higher than the primer temperature." />
                            <param name="QPROBE_TMP_max" type="integer" min="0" max="100" value="70" label="Maximum qPCR Probe Temperature." help="Mean 7°C higher than the primer temperature." />
                            <param name="QPROBE_TMP_opt" type="integer" min="0" max="100" value="67" label="Optimum qPCR Probe Temperature." help="Mean 7°C higher than the primer temperature." />
                            <param name="QPROBE_SIZES_min" type="integer" min="0" max="100" value="20" label="Minmum qPCR Probe Sizes" />
                            <param name="QPROBE_SIZES_max" type="integer" min="0" max="100" value="30" label="Maximum qPCR Probe Sizes" />
                            <param name="QPROBE_SIZES_opt" type="integer" min="0" max="100" value="25" label="Optimum qPCR Probe Sizes" />
                            <param name="QPROBE_GC_RANGE_min" type="integer" min="0" max="100" value="40" label="Minimum qPCR Probe GC-Range" />
                            <param name="QPROBE_GC_RANGE_max" type="integer" min="0" max="100" value="80" label="Maximum qPCR Probe GC-Range" />
                            <param name="QPROBE_GC_RANGE_opt" type="integer" min="0" max="100" value="60" label="Optimum qPCR Probe GC-Range" />
                            <param name="QPROBE_GC_END_min" type="integer" min="0" max="5" value="0" label="Minimum qPCR GC at 3'End" />
                            <param name="QPROBE_GC_END_max" type="integer" min="0" max="5" value="4" label="Maximum qPCR GC at 3'End" />
                            <!--constraints for amplicon design-->
                            <param name="QPRIMER_DIFF" type="integer" min="0" max="10" value="2" label="Maximal temperature diff of qPCR primers." />
                            <param name="QPROBE_TEMP_DIFF_min" type="integer" min="0" max="20" value="5" label="Minimum Temp diff between probe and primers." />
                            <param name="QPROBE_TEMP_DIFF_max" type="integer" min="0" max="20" value="10" label="Maximum Temp diff between probe and primers." />
                            <param name="QPROBE_DISTANCE_min" type="integer" min="0" max="20" value="4" label="Minimum distance to the primer on the same strand." />
                            <param name="QPROBE_DISTANCE_max" type="integer" min="0" max="20" value="15" label=" Maximum distance to the primer on the same strand." />
                            <param name="END_OVERLAP" type="integer" min="0" max="10" value="5" label="End Overlap" help="Maximum allowed nt overlap between the ends of probe and primer." />
                            <param name="QAMPLICON_LENGTH_min" type="integer" min="0" max="300" value="70" label="Minimum qPCR amplicon length ." />
                            <param name="QAMPLICON_LENGTH_max" type="integer" min="0" max="300" value="300" label="Maximum qPCR amplicon length ." />
                            <param name="QAMPLICON_GC_min" type="integer" min="0" max="100" value="40" label="Minimum GC-amplicon quantity" />
                            <param name="QAMPLICON_GC_max" type="integer" min="0" max="100" value="60" label="Maximum GC-amplicon quantity" />
                            <param name="QAMPLICON_DEL_CUTOFF" type="integer" min="0" max="10" value="4" label="qAmplicon delta cutoff" help ="Consider regions of the alignment for deltaG calculation if they have smaller deletions than cutoff."/>
                        </section>
                    </when>
                </conditional>
                <section name="s_out_s" title="Specified Output" expanded="true">
                    <param name="s_out" type="select" display="checkboxes" multiple="true" optional="true" label="Which mode specific outputs you would like to obtain?">
                        <option value="qpcr_design">A tab separated file with important parameters for the qPCR amplicon including the deltaG.</option>
                        <option value="qpcr_primers">A tab separated file with important parameters for the primers and probes including the sequence with ambiguous nucleotides (already in the right strand) and the gc and temperature of the best fitting primer and probe as well as for the mean for all permutations.</option>
                        <option value="oligos">Oligo sequences in fasta format.</option>
                        <option value="probe_regions">A bed file showing the location of the potential regions of the consensus sequence that were evaluated for probes.</option>
                    </param>
                </section>
            </when>
        </conditional>
        <expand macro="g_out" />
    </inputs>
    <outputs>
        <data name="ambiguous_consensus" format="fasta" from_work_dir="results/ambiguous_consensus.fasta" label="${tool.name} on ${on_string}: Ambiguous consensus">
            <filter>'ambiguous_consensus' in g_out_s['g_out']</filter>
        </data>
        <data name="amplicon_plot" format="pdf" from_work_dir="results/amplicon_plot.pdf" label="${tool.name} on ${on_string}: Amplicon Plot">
            <filter>'amplicon_plot' in g_out_s['g_out']</filter>
        </data>
        <data name="amplicons" format="bed" from_work_dir="results/amplicons.bed" label="${tool.name} on ${on_string}: Amplicons">
            <filter>'amplicons' in g_out_s['g_out']</filter>
        </data>
        <data name="per_base_mismatches" format="pdf" from_work_dir="results/per_base_mismatches.pdf" label="${tool.name} on ${on_string}: Per_base mismatches">
            <filter>'per_base_mismatches' in g_out_s['g_out']</filter>
        </data>
        <data name="primers_bed" format="bed" from_work_dir="results/primers.bed" label="${tool.name} on ${on_string}: Primer location">
            <filter>'primers' in g_out_s['g_out']</filter>
        </data>
        <data name="varvamp_log" format="txt" from_work_dir="results/varvamp_log.txt" label="${tool.name} on ${on_string}: Varvamp Log">
            <filter>'varvamp_log' in g_out_s['g_out']</filter>
        </data>
        <data name="alignment_cleaned" format="fasta" from_work_dir="results/data/alignment_cleaned.fasta" label="${tool.name} on ${on_string}: Alignment cleaned">
            <filter>'alignment_cleaned' in g_out_s['g_out']</filter>
        </data>
        <data name="majority_consensus" format="fasta" from_work_dir="results/data/majority_consensus.fasta" label="${tool.name} on ${on_string}: Majority consensus">
            <filter>'majority_consensus' in g_out_s['g_out']</filter>
        </data>
        <data name="primer_regions" format="bed" from_work_dir="results/data/primer_regions.bed" label="${tool.name} on ${on_string}: Primer regions">
            <filter>'primer_regions' in g_out_s['g_out']</filter>
        </data>
        <data name="primer_to_amplicon_assignments" format="tabular" from_work_dir="results/primer_to_amplicon_assignments.tabular" label="${tool.name} on ${on_string}: Primer to amplicon assignments">
            <filter>(mode['m_select'] == 'tiled' or mode['m_select'] == 'single') and (mode['s_out_s']['s_out'] and "primer_to_amplicon_assignments" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="primer_tabular" format="tabular" from_work_dir="results/primer.tsv" label="${tool.name} on ${on_string}: Primer table">
            <filter>(mode['m_select'] == 'tiled' or mode['m_select'] == 'single') and (mode['s_out_s']['s_out'] and "primer" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="all_primers" format="bed" from_work_dir="results/data/all_primers.bed" label="${tool.name} on ${on_string}: All primer">
            <filter>(mode['m_select'] == 'tiled' or mode['m_select'] == 'single') and (mode['s_out_s']['s_out'] and "all_primers" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="qpcr_design" format="tabular" from_work_dir="results/qpcr_design.tsv" label="${tool.name} on ${on_string}: QPCR-Design" >
            <filter>mode['m_select'] == 'qpcr' and (mode['s_out_s']['s_out'] and "qpcr_design" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="qpcr_primers" format="tabular" from_work_dir="results/qpcr_primers.tsv" label="${tool.name} on ${on_string}: QPCR-Primer table">
            <filter>mode['m_select'] == 'qpcr' and (mode['s_out_s']['s_out'] and "qpcr_primers" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="oligos" format="fasta" from_work_dir="results/oligos.fasta" label="${tool.name} on ${on_string}: Oligos">
            <filter>mode['m_select'] == 'qpcr' and (mode['s_out_s']['s_out'] and "oligos" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="probe_regions" format="bed" from_work_dir="results/data/probe_regions.bed" label="${tool.name} on ${on_string}: Probe regions">
            <filter>mode['m_select'] == 'qpcr' and (mode['s_out_s']['s_out'] and "probe_regions" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="unsolvable_primer_dimers" format="tabular" from_work_dir="results/unsolvable_primer_dimers.tsv" label="${tool.name} on ${on_string}: Unsolvable primer dimers">
            <filter>mode['m_select'] == 'tiled' and (mode['s_out_s']['s_out'] and "unsolvable_primers_dimers" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="primers_pool_0_1" format="fasta" from_work_dir="results/primers_pool_0/1.fasta" label="${tool.name} on ${on_string}: Primer pool">
            <filter>mode['m_select'] == 'tiled' and (mode['s_out_s']['s_out'] and "primers_pool_0_1" in mode['s_out_s']['s_out'])</filter>
        </data>
        <data name="primers" format="fasta" from_work_dir="results/primers.fasta" label="${tool.name} on ${on_string}: Primers fasta">
            <filter>mode['m_select'] == 'single' and (mode['s_out_s']['s_out'] and "primers" in mode['s_out_s']['s_out'])</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="13">
            <param name="alignment" value="hepatitis_e_aln_shrunk.fasta"/>
            <conditional name="mode">
                <param name='m_select' value="single"/>
                <param name="threshold" value="0.8"/>
                <param name="n_ambig" value="3"/>
                <param name="opt_length" value="300"/>
                <param name="max_length" value="400"/>
                <param name="report_n" value="5"/>
                <section name="s_out_s">
                    <param name="s_out" value="primers,primer_to_amplicon_assignments,primer,all_primers"/>
                </section>
            </conditional>
            <section name="g_out_s">
                <param name="g_out" value="ambiguous_consensus,amplicon_plot,amplicons,per_base_mismatches,primers,varvamp_log,alignment_cleaned,majority_consensus,primer_regions"/>
            </section>
            <output name="ambiguous_consensus" ftype="fasta">
                <assert_contents>
                    <has_text text="gccgmtgycggagctt"/>
                </assert_contents>
            </output>
            <output name="amplicon_plot" ftype="pdf">
                <assert_contents>
                    <has_text text="0000173546"/>
                </assert_contents>
            </output>
            <output name="amplicons" ftype="bed">
                <assert_contents>
                    <has_text text="6352"/>
                </assert_contents>
            </output>
            <output name="per_base_mismatches" ftype="pdf">
                <assert_contents>
                    <has_text text="0000016586"/>
                </assert_contents>
            </output>
            <output name="primers" ftype="fasta">
                <assert_contents>
                    <has_text text="TGTATGARGCRGCCCAYTCTGA"/>
                </assert_contents>
            </output>
            <output name="varvamp_log" ftype="txt">
                <assert_contents>
                    <has_line line="AMPLICON_MAX_LENGTH = 1499"/>
                </assert_contents>
            </output>
            <output name="alignment_cleaned" ftype="fasta">
                <assert_contents>
                    <has_text text="ggcgatgaactttacctt"/>
                </assert_contents>
            </output>
            <output name="majority_consensus" ftype="fasta">
                <assert_contents>
                    <has_text text="tatccttattaacctgatgcaaccccggcagctt"/>
                </assert_contents>
            </output>
            <output name="primer_regions" ftype="bed">
                <assert_contents>
                    <has_n_lines n="580"/>
                </assert_contents>
            </output>
            <output name="primers" ftype="fasta">
                <assert_contents>
                    <has_n_lines n="16"/>
                </assert_contents>
            </output>
            <output name="primers" ftype="fasta">
                <assert_contents>
                    <has_text text="TTTCTGGGGTGACAGGGTTGAT"/>
                </assert_contents>
            </output>
            <output name="all_primers" ftype="bed">
                <assert_contents>
                    <has_n_lines n="458"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="14">
            <param name="alignment" value="hepatitis_e_aln_shrunk.fasta"/>
            <conditional name="mode">
                <param name='m_select' value="tiled"/>
                <param name="threshold" value="0.6"/>
                <param name="n_ambig" value="2"/>
                <param name="opt_length" value="150"/>
                <param name="max_length" value="300"/>
                <param name="overlap" value="100"/>
                <section name="s_out_s">
                    <param name="s_out" value="unsolvable_primers_dimers,primers_pool_0_1,primer_to_amplicon_assignments,primer,all_primers"/>
                </section>
            </conditional>
            <section name="g_out_s">
                <param name="g_out" value="ambiguous_consensus,amplicon_plot,amplicons,per_base_mismatches,primers,varvamp_log,alignment_cleaned,majority_consensus,primer_regions"/>
            </section>
            <output name="ambiguous_consensus" ftype="fasta">
                <assert_contents>
                    <has_text text="taccccctgaggttctgttaccacctggmacttac"/>
                </assert_contents>
            </output>
            <output name="amplicon_plot" ftype="pdf">
                <assert_contents>
                    <has_text text="405.326875"/>
                </assert_contents>
            </output>
            <output name="amplicons" ftype="bed">
                <assert_contents>
                    <has_text text="6455"/>
                </assert_contents>
            </output>
            <output name="per_base_mismatches" ftype="pdf">
                <assert_contents>
                    <has_text text="1103.3779521457"/>
                </assert_contents>
            </output>
            <output name="primers" ftype="bed">
                <assert_contents>
                    <has_text text="4226"/>
                </assert_contents>
            </output>
            <output name="varvamp_log" ftype="txt">
                <assert_contents>
                    <has_line line="AMPLICON_MAX_LENGTH = 856"/>
                </assert_contents>
            </output>
            <output name="alignment_cleaned" ftype="fasta">
                <assert_contents>
                    <has_text text="ggcgatgaactttacctt"/>
                </assert_contents>
            </output>
            <output name="majority_consensus" ftype="fasta">
                <assert_contents>
                    <has_text text="ggcgatgaactttacctt"/>
                </assert_contents>
            </output>
            <output name="primer_regions" ftype="bed">
                <assert_contents>
                    <has_n_lines n="46"/>
                </assert_contents>
            </output>
            <output name="all_primers" ftype="bed">
                <assert_contents>
                    <has_n_lines n="764"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="13">
            <param name="alignment" value="hepatitis_e_aln_shrunk.fasta"/>
            <conditional name="mode">
                <param name='m_select' value="qpcr"/>
                <param name="threshold" value="0.7"/>
                <param name="n_ambig" value="1"/>
                <param name="pn-ambig" value="11"/>
                <param name="test-n" value="180"/>
                <param name="deltaG" value="15"/>
                <section name="s_out_s">
                    <param name="s_out" value="qpcr_design,qpcr_primers,oligos,probe_regions"/>
                </section>
            </conditional>
            <section name="g_out_s">
                <param name="g_out" value="ambiguous_consensus,amplicon_plot,amplicons,per_base_mismatches,primers,varvamp_log,alignment_cleaned,majority_consensus,primer_regions"/>
            </section>
            <output name="ambiguous_consensus" ftype="fasta">
                <assert_contents>
                    <has_text text="ttgcgcctagcagtttgtgatttccttcgagggctgacgaatgtt"/>
                </assert_contents>
            </output>
            <output name="amplicon_plot" ftype="pdf">
                <assert_contents>
                    <has_text text="405.326875"/>
                </assert_contents>
            </output>
            <output name="amplicons" ftype="bed">
                <assert_contents>
                    <has_text text="6141"/>
                </assert_contents>
            </output>
            <output name="per_base_mismatches" ftype="pdf">
                <assert_contents>
                    <has_text text="1103.3779521457"/>
                </assert_contents>
            </output>
            <output name="primers" ftype="bed">
                <assert_contents>
                    <has_text text="4226"/>
                </assert_contents>
            </output>
            <output name="varvamp_log" ftype="txt">
                <assert_contents>
                    <has_line line="PROBE_ALLOWED_N_AMB = 0"/>
                </assert_contents>
            </output>
            <output name="alignment_cleaned" ftype="fasta">
                <assert_contents>
                    <has_text text="ggcgatgaactttacctt"/>
                </assert_contents>
            </output>
            <output name="majority_consensus" ftype="fasta">
                <assert_contents>
                    <has_text text="ggcgatgaactttacctt"/>
                </assert_contents>
            </output>
            <output name="primer_regions" ftype="bed">
                <assert_contents>
                    <has_n_lines n="9"/>
                </assert_contents>
            </output>
            <output name="qpcr_design" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="16"/>
                </assert_contents>
            </output>
            <output name="qpcr_primers" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="46"/>
                </assert_contents>
            </output>
            <output name="oligos" ftype="fasta">
                <assert_contents>
                    <has_n_lines n="90"/>
                </assert_contents>
            </output>
            <output name="probe_regions" ftype="bed">
                <assert_contents>
                    <has_n_lines n="8"/>
                </assert_contents>
            </output>
        </test>  
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

variable VirusAMPlicons (varVAMP) is a tool to design primers for highly diverse viruses. The input is an alignment of your viral (full-s_out) sequences.

For a lot of virus genera it is difficult to design pan-specific primers. varVAMP solves this by introducing ambiguous characters into primers and minimizes mismatches at the 3' end.
Primers might not work for some sequences of your input alignment but should recognize the large majority.

varVAMP comes in three different flavors:

* SANGER: varVAMP searches for the very best primers and reports back non-overlapping amplicons which can be used for PCR-based screening approaches.
      * TILED: varVAMP uses a graph based approach to design overlapping amplicons that tile the entire viral genome. This designs amplicons that are suitable for Oxford Nanopore or Illumina based full-genome sequencing.
* QPCR: varVAMP searches for small amplicons with an optimized internal probe (TaqMan). It minimizes temperature differences between the primers and checks for amplicon secondary structures.


    ]]></help>
    <citations>
        <citation type="doi">https://github.com/jonas-fuchs/varVAMP/</citation>
    </citations>
</tool>
