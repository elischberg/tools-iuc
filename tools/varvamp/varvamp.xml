<tool id="varvamp" name="varVAMP" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>design primers for highly diverse viruses</description>
    <macros>
      <import>macros.xml</import>
    </macros>
   <requirements>
        <requirement type="package" version="@TOOL_VERSION@">varvamp</requirement>
    </requirements>
    <version_command>varvamp --version</version_command>
    <command detect_errors="exit_code"><![CDATA[

    mkdir results &&
    varvamp

    $mode.mode_select
    #if $mode.threshold != None
      --threshold $mode.threshold
    #elif $mode.n_ambig != None
      --n-ambig $mode.n_ambig 
      #end if

    ##if $mode.database_section.database != None
     ## --database $mode.database_section.database
    ##end if

   
    #if str( $mode.mode_select ) == "single":
      #if $mode.opt_length != None
        --opt-length $mode.opt_length
      #elif $mode.max_length != None
        --max-length $mode.max_length
      #elif $mode.report_n != None
        --report-n $mode.report_n
      #end if
    #elif str( $mode.mode_select ) == "tiled":
      #if $mode.opt_length != None
        --opt-length $mode.opt_length
      #elif $mode.max_length != None 
        --max-length $mode.max_length
      #elif $mode.overlap != None
        --overlap $mode.overlap
      #end if
    #elif str( $mode.mode_select ) == "qpcr":
      #if $mode.pn_ambig != None
        --pn-ambig $mode.pn_ambig
      #elif $mode.test_n != None 
        --test-n $mode.test_n
      #elif $mode.deltaG != None
        --deltaG $mode.deltaG
      #end if
    #end if

    ##--n-threads /${GALAXY_SLOTS:-1}
    
    '$alignment'
    results/

     
    ]]></command>
    <inputs>
        <param name="alignment" type="data" format="fasta" label="Multiple alignment" />
        <conditional name="mode">
            <param name="mode_select" type="select" label="Choose a specific design mode for your primers.">
                <option value="single">Primers for single sequencing</option>
                <option value="tiled">Primers for whole genome sequencing</option>
                <option value="qpcr">Primers for qPCR</option>
            </param>
            <when value="single">
              <expand macro="general_parameter" />
              <param argument="--opt-length" type="integer" min="0" max="10000" optional="true" label="optimal length of the amplicons" help="If not specified, Default setting: 1000" />
              <param argument="--max-length" type="integer" min="0" max="10000" optional="true" label="max length of the amplicons" help="If not specified, Default setting: 1500" />
              <param argument="--report-n" type="integer" min="1" optional="true" label="report the top n best hits" help="If not specified, Default setting: infinite" />
              <section name="mode_specified" title="Specified Output" expanded="true">
                <param name="mode_specified_outputs" type="select" display="checkboxes" multiple="true" label="Which mode specific output you would lie to obtain?">
                  <option value="primers">Primer sequences in fasta format.</option>
                  <option value="primer_to_amplicon_assignments">Simple tab separated file, which primers belong together. Useful for bioinformatic workflows that include primer trimming.</option>
                  <option value="primer">A tab separated file with important parameters for the primers including the sequence with ambiguous nucleotides (already in the right strand) and the gc and temperature of the best fitting primer as well as for the mean for all permutations of the primer.</option>
                  <option value="all_primers">A bed file with all high scoring primers that varVAMP found.</option>
                </param>
              </section>
            </when>
            <when value="tiled">
              <expand macro="general_parameter" />
              <param argument="--opt-length" type="integer" min="200" max="10000" optional="true" label="Optimal length of the amplicons" help="If not specified, Default setting: 1000" />
              <param argument="--max-length" type="integer" min="200" max="10000" optional="true" label="Maximum length of the amplicons" help="If not specified, Default setting: 1500" />
              <param argument="--overlap" type="integer" min="1" max="1000" optional="true" label="Minimum overlap of the amplicons" help="If not specified, Default setting: 100" />
              <section name="mode_specified" title="Specified Output" expanded="true">
                <param name="mode_specified_outputs" type="select" display="checkboxes" multiple="true" label="Which mode specific output you would lie to obtain?">
                  <option value="unsolvable_primer_dimers">Only produced if there are primer dimers without replacements. Tells which primers form dimers and at which temperature.</option>
                  <option value="primers_pool_0_1">Primer sequences per pool in fasta format.</option>
                  <option value="primer_to_amplicon_assignments">Simple tab separated file, which primers belong together. Useful for bioinformatic workflows that include primer trimming.</option>
                  <option value="primer_tab">A tab separated file with important parameters for the primers including the sequence with ambiguous nucleotides (already in the right strand) and the gc and temperature of the best fitting primer as well as for the mean for all permutations of the primer.</option>
                  <option value="all_primers">A bed file with all high scoring primers that varVAMP found.</option>
                </param>
              </section>
            </when>
            <when value="qpcr">
              <expand macro="general_parameter" />
              <param argument="--pn-ambig" type="integer" min="0" max="100" optional="true" label="Max number of ambiguous characters in a probe" />
              <param argument="--test-n" type="integer" min="10" max="1000" optional="true" label="Top n qPCR amplicons to test" help="test the top n qPCR amplicons for secondary structures at the minimal primer temperature. If not specified, Default setting: 50" />
              <param argument="--deltaG" type="integer" min="-100" max="100" optional="true" label="Minimum free energy (kcal/mol/K) cutoff" help="Minimum free energy (kcal/mol/K) cutoff at the lowest primer melting temperature. If not specified, Default setting: -3." />
              <section name="mode_specified" title="Specified Output" expanded="true">
              <param name="mode_specified_outputs" type="select" display="checkboxes" multiple="true" label="Which mode specific output you would lie to obtain?">
                <option value="qpcr_design">A tab separated file with important parameters for the qPCR amplicon including the deltaG.</option>
                <option value="qpcr_primers">A tab separated file with important parameters for the primers and probes including the sequence with ambiguous nucleotides (already in the right strand) and the gc and temperature of the best fitting primer and probe as well as for the mean for all permutations.</option>
                <option value="oligos">Oligo sequences in fasta format.</option>
                <option value="probe_regions">A bed file showing the location of the potential regions of the consensus sequence that were evaluated for probes.</option>
              </param>
            </section>
          </when>
        </conditional>
      <expand macro="general_outputs" />
    </inputs>
    <outputs>
      <data name="ambiguous_consensus" format="fasta" from_work_dir="results/ambiguous_consensus.fasta" label="${tool.name} on ${on_string}: Ambi_Conses">
            <filter>'ambiguous_consensus' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="amplicon_plot" format="pdf" from_work_dir="results/amplicon_plot.pdf" label="${tool.name} on ${on_string}: Amplic_Plot">
            <filter>'amplicon_plot' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="amplicons" format="bed" from_work_dir="results/amplicons.bed" label="${tool.name} on ${on_string}: Amplics">
            <filter>'amplicons' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="per_base_mismatches" format="pdf" from_work_dir="results/per_base_mismatches.pdf" label="${tool.name} on ${on_string}: P_B_MM">
            <filter>'per_base_mismatches' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="primers_bed" format="bed" from_work_dir="results/results/primers.bed" label="${tool.name} on ${on_string}: Prim_Loc">
            <filter>'primers' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="varvamp_log" format="txt" from_work_dir="results/varvamp_log.txt" label="${tool.name} on ${on_string}: Varv_Log">
            <filter>'varvamp_log' in general_outputs["general_outputs"]</filter>
        </data>

        <data name="alignment_cleaned" format="fasta" from_work_dir="results/data/alignment_cleaned.fasta" label="${tool.name} on ${on_string}: Align_Clean">
            <filter>'alignment_cleaned' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="majority_consensus" format="fasta" from_work_dir="results/data/majority_consensus.fasta" label="${tool.name} on ${on_string}: Maj_Consens">
            <filter>'majority_consensus' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="primer_regions" format="bed" from_work_dir="results/data/primer_regions.bed" label="${tool.name} on ${on_string}: Prim_Reg">
            <filter>'primer_regions' in general_outputs["general_outputs"]</filter>
        </data>
        <data name="primer_to_amplicon_assignments" format="tabular" from_work_dir="results/primer_to_amplicon_assignments.tabular" label="${tool.name} on ${on_string}: Prim_Amplic_Assign">
            <filter>mode['select_mode'] == 'tiled' or mode['select_mode'] == 'single' and "primer_to_amplicon_assignments" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="primer_tabular" format="tabular" from_work_dir="results/primer.tsv" label="${tool.name} on ${on_string}: Prim_Tab">
            <filter>mode['select_mode'] == 'tiled' or mode['select_mode'] == 'single' and "primer_tab" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="all_primer" format="bed" from_work_dir="results/data/all_primer.bed" label="${tool.name} on ${on_string}: All_Prims">
            <filter>mode['select_mode'] == 'tiled' or mode['select_mode'] == 'single' and "all_primers" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>

        <data name="qpcr_design" format="tabular" from_work_dir="results/qpcr_design.tsv" label="${tool.name} on ${on_string}: QPCR_Des" >
            <filter>mode['select_mode'] == 'qpcr' and "qpcr_design" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="qpcr_primers" format="tabular" from_work_dir="results/qpcr_primers.tsv" label="${tool.name} on ${on_string}: QPCR_Prim">
            <filter>mode['select_mode'] == 'qpcr' and "qpcr_primers" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="oligos" format="fasta" from_work_dir="results/oligos.fasta" label="${tool.name} on ${on_string}: Oligs">
            <filter>mode['select_mode'] == 'qpcr' and "oligos" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="probe_regions" format="bed" from_work_dir="results/data/probe_regions.bed" label="${tool.name} on ${on_string}: Prob_Reg">
            <filter>mode['select_mode'] == 'qpcr' and "probe_regions" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="unsolvable_primer_dimers" format="tabular" from_work_dir="results/unsolvable_primer_dimers.tsv" label="${tool.name} on ${on_string}: Unsolv_Prim_Dims">
            <filter>mode['select_mode'] == 'tiled' and "unsolvable_primers_dimers" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="primers_pool_0_1" format="fasta" from_work_dir="results/primers_pool_0/1.fasta" label="${tool.name} on ${on_string}: Prims_Pool">
          <filter>mode['select_mode'] == 'tiled' and "primers_pool_0_1" in mode["mode_specified"]["mode_specified_outputs"]</filter>
        </data>
        <data name="primers" format="fasta" from_work_dir="results/" label="${tool.name} on ${on_string}: Prims">
            <filter>mode['select_mode'] == 'single' and "primers" in mode["mode_specified"]["mode_specified_outputs"] </filter>
        </data>
    </outputs>
    <tests>
      <test expect_num_outputs="13">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <param name="alignment" value="hepatitis_e_aln.fasta"/>
        <param name="threshold" value="-1.1"/>
        <param name="n_ambig" value="0"/>
        <param name="database" value=""/>
        <param name="outputs" value="ambiguous_consensus"/>
        <conditional name="mode">
            <param name="mode_select" value="single"/>
            <param name="opt_length" value="999"/>
            <param name="max_length" value="1499"/>
            <param name="report_n" value=""/>
        </conditional>
      </test>
      <test expect_num_outputs="14">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <param name="alignment" value="hepatitis_e_aln.fasta"/>
        <param name="threshold" value=""/>
        <param name="n_ambig" value=""/>
        <param name="database" value=""/>
        <param name="outputs" value="ambiguous_consensus"/>
        <conditional name="mode">
            <param name="mode_select" value="tiled"/>
            <param name="opt_length" value="999"/>
            <param name="max_length" value="1499"/>
            <param name="overlap" value="99"/>
        </conditional>
      </test>
      <test expect_num_outputs="13">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <param name="alignment" value="hepatitis_e_aln.fasta"/>
        <param name="threshold" value=""/>
        <param name="n_ambig" value=""/>
        <param name="database" value=""/>
        <param name="outputs" value="ambiguous_consensus"/>
        <conditional name="mode">
            <param name="mode_select" value="qpcr"/>
            <param name="pn_ambig" value="max number of ambiguous characters in a probe"/>
            <param name="test_n" value="49"/>
            <param name="deltaG" value="-4"/>
        </conditional>
      </test>  
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

variable VirusAMPlicons (varVAMP) is a tool to design primers for highly diverse viruses. The input is an alignment of your viral (full-genome) sequences.

For a lot of virus genera it is difficult to design pan-specific primers. varVAMP solves this by introducing ambiguous characters into primers and minimizes mismatches at the 3' end.
Primers might not work for some sequences of your input alignment but should recognize the large majority.

varVAMP comes in three different flavors:

* SANGER: varVAMP searches for the very best primers and reports back non-overlapping amplicons which can be used for PCR-based screening approaches.
* TILED: varVAMP uses a graph based approach to design overlapping amplicons that tile the entire viral genome. This designs amplicons that are suitable for Oxford Nanopore or Illumina based full-genome sequencing.
* QPCR: varVAMP searches for small amplicons with an optimized internal probe (TaqMan). It minimizes temperature differences between the primers and checks for amplicon secondary structures.


    ]]></help>
  <citations>
    <citation type="doi">https://github.com/jonas-fuchs/varVAMP/</citation>
  </citations>
</tool>
